package linuschien.vaadin.application.component;

import linuschien.vaadin.application.model.User;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

@SuppressWarnings("serial")
public class MasterDetailFormComponent extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table table;
	@AutoGenerated
	private HorizontalLayout formLayout;
	@AutoGenerated
	private Button save;
	@AutoGenerated
	private TextField phone;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private TextField name;

	private BeanItem<User> item = new BeanItem<User>(new User("", "", ""));

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MasterDetailFormComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		name.setPropertyDataSource(item.getItemProperty("name"));
		email.setPropertyDataSource(item.getItemProperty("email"));
		phone.setPropertyDataSource(item.getItemProperty("phone"));

		final BeanItemContainer<User> itemContainer = new BeanItemContainer<User>(User.class);
		table.setContainerDataSource(itemContainer);

		save.addListener(new Button.ClickListener() {
			public void buttonClick(ClickEvent event) {
				itemContainer.addBean(item.getBean().clone());
				table.setPageLength(itemContainer.size());
			}
		});

		table.addGeneratedColumn("Delete", new ColumnGenerator() {
			@Override
			public Object generateCell(final Table source, final Object itemId, Object columnId) {
				Button button = new Button("刪除");
				button.addListener(new ClickListener() {
					@Override
					public void buttonClick(ClickEvent event) {
						source.getContainerDataSource().removeItem(itemId);
						table.setPageLength(itemContainer.size());
					}
				});
				return button;
			}
		});

		table.setCellStyleGenerator(new Table.CellStyleGenerator() {
			public String getStyle(Object itemId, Object propertyId) {
				if ("Delete".equals(propertyId)) {
					return "middle";
				}
				return "";
			}
		});

		table.setVisibleColumns(new Object[] { "Delete", "name", "email", "phone" });
		table.setColumnHeaders(new String[] { "刪除", "名稱", "信箱", "電話" });
		table.setSortDisabled(true);
		table.setPageLength(itemContainer.size());
		table.setColumnAlignment("Delete", Table.ALIGN_CENTER);

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// formLayout
		formLayout = buildFormLayout();
		mainLayout.addComponent(formLayout);

		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("-1px");
		table.setHeight("-1px");
		mainLayout.addComponent(table);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildFormLayout() {
		// common part: create layout
		formLayout = new HorizontalLayout();
		formLayout.setImmediate(false);
		formLayout.setWidth("-1px");
		formLayout.setHeight("-1px");
		formLayout.setMargin(false);

		// name
		name = new TextField();
		name.setCaption("名稱");
		name.setImmediate(false);
		name.setWidth("-1px");
		name.setHeight("-1px");
		formLayout.addComponent(name);

		// email
		email = new TextField();
		email.setCaption("信箱");
		email.setImmediate(false);
		email.setWidth("-1px");
		email.setHeight("-1px");
		formLayout.addComponent(email);

		// phone
		phone = new TextField();
		phone.setCaption("電話");
		phone.setImmediate(false);
		phone.setWidth("-1px");
		phone.setHeight("-1px");
		formLayout.addComponent(phone);

		// save
		save = new Button();
		save.setCaption("儲存");
		save.setImmediate(true);
		save.setWidth("-1px");
		save.setHeight("-1px");
		formLayout.addComponent(save);
		formLayout.setComponentAlignment(save, new Alignment(9));

		return formLayout;
	}

}
